type: library
target: lib_hal_ll_spi_master

#begin python  # pic32 specific
import re
hal_ll_def_list = []
if "PIC32" in MEMAKE_MCU_NAME:
    hal_ll_def_list.append("__pic32__")
    hal_ll_def_list.append(MEMAKE_MCU_NAME[:7] + "xx")
    hal_ll_def_list.append(MEMAKE_MCU_NAME[:8] + "xx")
    hal_ll_def_list.append(MEMAKE_MCU_NAME[:10] + "xx")
    hal_ll_def_list.append(MEMAKE_MCU_NAME[:-10] + "xx")
else:
    hal_ll_def_list.append("__family_not_supported__")

hal_ll_def_list.append(MEMAKE_MCU_NAME)

## BEGIN SPI
if re.match("(^PIC32MX[1-7][1-79][045]F(512|256|128|064|032|016)[HLBCD]B?$|^PIC32MZ(0512|1024|2048)EF[FEHMGK](064|100|124|144)$)", MEMAKE_MCU_NAME):
    spi_master_implementation = "implementation_1"

    ## Match group of PIC32MX MCU's which utilize SPIxBRG<12:0> register bits.
    ## 1st datasheet -> https://ww1.microchip.com/downloads/en/DeviceDoc/PIC32MX1XX2XX%20283644-PIN_Datasheet_DS60001168L.pdf
if re.match("(^PIC32MX[12][12357][0]F(016|032|064|128|256)[BCD]B?$)", MEMAKE_MCU_NAME):
    hal_ll_def_list.append("SPI_BAUD_REG_13_BIT_RESOLUTION")

    ## Match group of PIC32MX MCU's which utilize SPIxBRG<8:0> register bits.    
    ## 2nd datasheet -> https://ww1.microchip.com/downloads/en/DeviceDoc/PIC32MX330350370430450470_Datasheet_DS60001185H.pdf
    ## 3rd datasheet -> https://ww1.microchip.com/downloads/en/DeviceDoc/61143H.pdf
    ## 4th datasheet -> https://ww1.microchip.com/downloads/en/DeviceDoc/PIC32MX5XX6XX7XX_Family)Datasheet_DS60001156K.pdf
    ## 5th datasheet -> https://ww1.microchip.com/downloads/en/DeviceDoc/PIC32MX1XX2XX5XX%2064100-PIN_Family_60001290F.pdf
elif re.match("(^PIC32MX[34][357][0]F(064|128|256|512)[HL]B?$)|(^PIC32MX[34][246][0]F(032|064|128|256|512)[HL]$)|(^PIC32MX[567][3679][45]F(064|128|256|512)[HL]$)|(^PIC32MX[125][2357][0]F(064|128|256|512)[HL]$)", MEMAKE_MCU_NAME):
    hal_ll_def_list.append("SPI_BAUD_REG_9_BIT_RESOLUTION")

    ## Match group of PIC32MZ MCU's which utilize both SPIxBRG<8:0> and SPIxBRG<12:0> register bits.
    ## 6th datasheet -> https://ww1.microchip.com/downloads/en/DeviceDoc/PIC32MZ%20EF%20Family%20Datasheet_DS60001320G.pdf
elif re.match("(^PIC32MZ(0512|1024|2048)EF[FEHMGK](064|100|124|144)$)", MEMAKE_MCU_NAME):
    hal_ll_def_list.append("SPI_BAUD_REG_9_AND_13_BIT_RESOLUTION_MZ")
## END SPI
## BEGIN PMD
if re.match("(^PIC32MX([12][0-9]{2}|330|350|370|430|450|470|530|550|570)F(512|256|128|064|032|016)[HLBCD]B?$|^PIC32MZ(0512|1024|2048)EF[FEHMGK](064|100|124|144)$)", MEMAKE_MCU_NAME):
    hal_ll_def_list.append("HAL_LL_PERIPHERAL_MODULE_DISABLE")
## END PMD
#end python

defines: {
    <['\r\n'.join(hal_ll_def_list)]>
}

depends: {
    MikroC.Core
    MikroSDK.HalLowLevel.PPS
    MikroSDK.HalLowLevelCore
    MikroSDK.HalLowLevelCommon
}

sources: {
::  BEGIN SPI
    ./<[spi_master_implementation]>/hal_ll_spi_master.c
::  END SPI
}

headers: {
    ../../include/hal_ll_target.h
    ../../include/hal_ll_slrcon_map.h
    ../../include/hal_ll_odcon_map.h
::  BEGIN SPI
    ../../include/spi_master/hal_ll_spi_master.h
    ../../include/spi_master/hal_ll_spi_master_pin_map.h
::  END SPI
}

include: {
    ../../include
    ../../include/gpio
::  BEGIN SPI
    ../../include/spi_master
::  END SPI
}

expInclude: {
    ./include/<[MEMAKE_MCU_NAME.lower()]>
    ./include/hal_ll_port
}

install: {
    src(../../include/spi_master/hal_ll_spi_master.h) dst(./include/hal_ll_port/hal_ll_spi_master.h)
    src(../../include/spi_master/hal_ll_spi_master_pin_map.h) dst(./include/hal_ll_port/hal_ll_spi_master_pin_map.h)
}

alias: MikroSDK.HalLowLevel.SPI.Master
