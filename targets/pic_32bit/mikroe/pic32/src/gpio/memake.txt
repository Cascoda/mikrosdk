type: library
target: lib_hal_ll_gpio

#begin python  # pic32 specific
import re

hal_ll_def_list = []
if "PIC32" in MEMAKE_MCU_NAME:
    hal_ll_def_list.append("__pic32__")
    hal_ll_def_list.append(MEMAKE_MCU_NAME[:7] + "xx")
    hal_ll_def_list.append(MEMAKE_MCU_NAME[:8] + "xx")
    hal_ll_def_list.append(MEMAKE_MCU_NAME[:10] + "xx")
    hal_ll_def_list.append(MEMAKE_MCU_NAME[:-10] + "xx")
else:
    hal_ll_def_list.append("__family_not_supported__")

hal_ll_def_list.append(MEMAKE_MCU_NAME)

## BEGIN GPIO
if re.match("(^PIC32MX[1-7][1-79][045]F(512|256|128|064|032|016)[HLBCD]B?$|^PIC32MZ(0512|1024|2048)EF[FEHMGK](064|100|124|144)$)", MEMAKE_MCU_NAME):
    hal_ll_def_list.append("__hal_ll_gpio_subset_1__")
    gpio_implementation = "implementation_1"
    gpio_subimplementation = "subimplementation_1"
    # Match PIC32MX MCUs where analog pins are set by clearing respective register bit
    if re.match("(^PIC32MX[34][246][0]F(032|064|128|256|512)[HL]$)|(^PIC32MX[567][3679][45]F(064|128|256|512)[HL]$)", MEMAKE_MCU_NAME):
        hal_ll_def_list.append("MARK_AS_DIGITAL=set_reg_bit")
        hal_ll_def_list.append("MARK_AS_ANALOG=clear_reg_bit")
    # Match PIC32MZ and PIC32MX MCUs where analog pins are set by setting respective register bit
    elif re.match("(^PIC32MX[12][12357][0]F(016|032|064|128|256)[BCD]B?$)|(^PIC32MX[34][357][0]F(064|128|256|512)[HL]B?$)|(^PIC32MX[125][2357][0]F(064|128|256|512)[HL]$)|(^PIC32MZ(0512|1024|2048)EF[E-HKM](064|100|124|144)$)", MEMAKE_MCU_NAME):
        hal_ll_def_list.append("MARK_AS_DIGITAL=clear_reg_bit")
        hal_ll_def_list.append("MARK_AS_ANALOG=set_reg_bit")
## END GPIO
## BEGIN PMD
if re.match("(^PIC32MX([12][0-9]{2}|330|350|370|430|450|470|530|550|570)F(512|256|128|064|032|016)[HLBCD]B?$|^PIC32MZ(0512|1024|2048)EF[FEHMGK](064|100|124|144)$)", MEMAKE_MCU_NAME):
    hal_ll_def_list.append("HAL_LL_PERIPHERAL_MODULE_DISABLE")
## END PMD
#end python

defines: {
    <['\r\n'.join(hal_ll_def_list)]>
}

depends: {
    MikroC.Core
    MikroSDK.HalLowLevelCore
    MikroSDK.HalLowLevelCommon
}

sources: {
::  BEGIN GPIO
    ./<[gpio_implementation]>/hal_ll_gpio.c
    ./<[gpio_implementation]>/<[gpio_subimplementation]>/hal_ll_gpio_port.c
::  END GPIO
}

headers: {
    ../../include/hal_ll_target.h
    ../../include/hal_ll_slrcon_map.h
    ../../include/hal_ll_odcon_map.h
::  BEGIN GPIO
    ../../include/gpio/hal_ll_gpio.h
    ../../include/gpio/hal_ll_gpio_port.h
    ../../include/gpio/hal_ll_gpio_constants.h
::  END GPIO
}

include: {
    ../../include
    ../../include/adc
::  BEGIN GPIO
    ../../include/gpio
::  END GPIO
}

expInclude: {
    ./include/<[MEMAKE_MCU_NAME.lower()]>
    ./include/hal_ll_port
}

install: {
    src(../../include/gpio/hal_ll_gpio.h) dst(./include/hal_ll_port/hal_ll_gpio.h)
    src(../../include/gpio/hal_ll_gpio_constants.h) dst(./include/hal_ll_port/hal_ll_gpio_constants.h)
    src(../../include/gpio/hal_ll_gpio_port.h) dst(./include/hal_ll_port/hal_ll_gpio_port.h)
}

alias: MikroSDK.HalLowLevel.GPIO
