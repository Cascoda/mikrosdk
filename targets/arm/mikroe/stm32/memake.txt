type: library
target: lib_hal_ll

#begin python  # stm specific
hal_ll_def_list = []
if MEMAKE_MCU_NAME[6] == "0":
    hal_ll_def_list.append("__cortex_m0__")
elif MEMAKE_MCU_NAME[6] == "1" or MEMAKE_MCU_NAME[6] == "2":
    hal_ll_def_list.append("__cortex_m3__")
elif MEMAKE_MCU_NAME[6] == "3" or MEMAKE_MCU_NAME[6] == "4":
    hal_ll_def_list.append("__cortex_m4__")
elif MEMAKE_MCU_NAME[6] == "7":
    hal_ll_def_list.append("__cortex_m7__")
else:
    hal_ll_def_list.append("__cortex_not_supported__")

hal_ll_def_list.append(MEMAKE_MCU_NAME)
hal_ll_def_list.append(MEMAKE_MCU_NAME[:-2] + "xx")     #STM32 + Product type + Series number + sub-lines + lines + 'xx'
hal_ll_def_list.append(MEMAKE_MCU_NAME[:8]  + "x")      #STM32 + Product type + Series number + 'xx'
hal_ll_def_list.append(MEMAKE_MCU_NAME[:7]  + "xx")     #STM32 + Product type + Series number + 'xx'

mcu_header_path = MEMAKE_MCU_NAME + MSDK_PACKAGE_NAME

if mcu_header_path[11] == "_":
   mcu_header_path = mcu_header_path[:11] + MSDK_PACKAGE_NAME

## BEGIN ADC
hal_ll_def_list.append("HAL_LL_ADC_RESOLUTION_MEMAKE=HAL_LL_ADC_RESOLUTION_12_BIT")

if (MEMAKE_MCU_NAME[0:7] == "STM32F2" or MEMAKE_MCU_NAME[0:7] == "STM32F4" or
    MEMAKE_MCU_NAME[0:7] == "STM32F7"):
    adc_subimplementation = "implementation_1/subimplementation_1/hal_ll_adc.c"
    adc_pin_map = "hal_ll_adc_pin_map/implementation_1/subimplementation_1"
elif (MEMAKE_MCU_NAME[0:7] == "STM32L4"):
    adc_subimplementation = "implementation_1/subimplementation_2/hal_ll_adc.c"
    adc_pin_map = "hal_ll_adc_pin_map/implementation_1/subimplementation_2"
elif (MEMAKE_MCU_NAME[0:7] == "STM32F1" or MEMAKE_MCU_NAME[0:8] == "STM32F37"):
    adc_subimplementation = "implementation_4/subimplementation_1/hal_ll_adc.c"
    adc_pin_map = "hal_ll_adc_pin_map/implementation_4/subimplementation_1"
elif (MEMAKE_MCU_NAME[0:7] == "STM32F3"):
    adc_subimplementation = "implementation_1/subimplementation_3/hal_ll_adc.c"
    adc_pin_map = "hal_ll_adc_pin_map/implementation_1/subimplementation_3"
elif (MEMAKE_MCU_NAME[0:7] == "STM32H7"):
    adc_subimplementation = "implementation_2/hal_ll_adc.c"
    adc_pin_map = "hal_ll_adc_pin_map/implementation_2"
elif (MEMAKE_MCU_NAME[0:7] == "STM32F0" or MEMAKE_MCU_NAME[0:7] == "STM32L0"):
    adc_subimplementation = "implementation_3/subimplementation_1/hal_ll_adc.c"
    adc_pin_map = "hal_ll_adc_pin_map/implementation_3/subimplementation_1"
elif (MEMAKE_MCU_NAME[0:7] == "STM32G0"):
    adc_subimplementation = "implementation_3/subimplementation_2/hal_ll_adc.c"
    adc_pin_map = "hal_ll_adc_pin_map/implementation_3/subimplementation_2"
elif (MEMAKE_MCU_NAME[0:7] == "STM32L1"):
    adc_subimplementation = "implementation_4/subimplementation_2/hal_ll_adc.c"
    adc_pin_map = "hal_ll_adc_pin_map/implementation_4/subimplementation_2"
## END ADC

## BEGIN GPIO
if MEMAKE_MCU_NAME[0:7] == "STM32F1":
    hal_ll_def_list.append("__hal_ll_gpio_subset_2__")
    gpio_subimplementation = "implementation_2/hal_ll_gpio_port.c"
else:
    hal_ll_def_list.append("__hal_ll_gpio_subset_1__")
    gpio_subimplementation = "implementation_1/hal_ll_gpio_port.c"
## END GPIO

## BEGIN I2C
if (MEMAKE_MCU_NAME[0:7] == "STM32F1" or MEMAKE_MCU_NAME[0:7] == "STM32L1" or
    MEMAKE_MCU_NAME[0:7] == "STM32F2" or MEMAKE_MCU_NAME[0:7] == "STM32F4"):
    i2c_subimplementation = "implementation_1/hal_ll_i2c_master.c"
    i2c_pin_map = "hal_ll_i2c_pin_map/implementation_1"
else:
    i2c_subimplementation = "implementation_2/hal_ll_i2c_master.c"
    i2c_pin_map = "hal_ll_i2c_pin_map/implementation_2"
## END I2C

## BEGIN SPI
if (MEMAKE_MCU_NAME[0:7] == "STM32H7"):
    spi_subimplementation = "implementation_2/hal_ll_spi_master.c"
    spi_pin_map = "hal_ll_spi_master_pin_map/implementation_2"
else:
    spi_subimplementation = "implementation_1/hal_ll_spi_master.c"
    spi_pin_map = "hal_ll_spi_master_pin_map/implementation_1"
## END SPI

## BEGIN TIM
if (MEMAKE_MCU_NAME[0:7] == "STM32L1" or MEMAKE_MCU_NAME[0:7] == "STM32F2" or
    MEMAKE_MCU_NAME[0:7] == "STM32F4" or MEMAKE_MCU_NAME[0:7] == "STM32F7" or
    MEMAKE_MCU_NAME[0:7] == "STM32H7"):
    tim_subimplementation = "implementation_1/hal_ll_tim.c"
    tim_pin_map = "hal_ll_tim_pin_map/implementation_1"
else:
    tim_subimplementation = "implementation_2/hal_ll_tim.c"
    tim_pin_map = "hal_ll_tim_pin_map/implementation_2"
## END TIM

## BEGIN UART
if (MEMAKE_MCU_NAME[0:7] == "STM32F1" or MEMAKE_MCU_NAME[0:7] == "STM32L1" or
    MEMAKE_MCU_NAME[0:7] == "STM32F2" or MEMAKE_MCU_NAME[0:7] == "STM32F4"):
    uart_subimplementation = "implementation_1/hal_ll_uart.c"
    uart_pin_map = "hal_ll_uart_pin_map/implementation_1"
else:
    uart_subimplementation = "implementation_2/hal_ll_uart.c"
    uart_pin_map = "hal_ll_uart_pin_map/implementation_2"
## END UART
#end python

defines: {
    <['\r\n'.join(hal_ll_def_list)]>
}

depends: {
    MikroC.Core
    MikroSDK.HalLowLevelCore
    MikroSDK.HalLowLevelCommon
}

sources: {
::  BEGIN ADC
    src/adc/<[adc_subimplementation]>
::  END ADC
::  BEGIN GPIO
    src/gpio/hal_ll_gpio.c
    src/gpio/<[gpio_subimplementation]>
::  END GPIO
::  BEGIN I2C
    src/i2c/<[i2c_subimplementation]>
::  END I2C
::  BEGIN SPI
    src/spi_master/<[spi_subimplementation]>
::  END SPI
::  BEGIN TIM
    src/tim/<[tim_subimplementation]>
::  END TIM
::  BEGIN UART
    src/uart/<[uart_subimplementation]>
::  END UART
}

headers: {
    include/hal_ll_rcc.h
    include/hal_ll_target.h
::  BEGIN ADC
    include/adc/hal_ll_adc.h
    include/adc/<[adc_pin_map]>/hal_ll_adc_pin_map.h
::  END ADC
::  BEGIN GPIO
    include/gpio/hal_ll_gpio.h
    include/gpio/hal_ll_gpio_port.h
    include/gpio/hal_ll_gpio_constants.h
::  END GPIO
::  BEGIN I2C
    include/i2c/hal_ll_i2c_master.h
    include/i2c/<[i2c_pin_map]>/hal_ll_i2c_pin_map.h
::  END I2C
::  BEGIN SPI
    include/spi_master/hal_ll_spi_master.h
    include/spi_master/<[spi_pin_map]>/hal_ll_spi_master_pin_map.h
::  END SPI
::  BEGIN TIM
    include/tim/hal_ll_tim.h
    include/tim/<[tim_pin_map]>/hal_ll_tim_pin_map.h
::  END TIM
::  BEGIN UART
    include/uart/hal_ll_uart.h
    include/uart/<[uart_pin_map]>/hal_ll_uart_pin_map.h
::  END UART
}

include: {
    ./include
::  BEGIN ADC
    ./include/adc
    ./include/adc/<[adc_pin_map]>
::  END ADC
::  BEGIN GPIO
    ./include/gpio
::  END GPIO
::  BEGIN I2C
    ./include/i2c
    ./include/i2c/<[i2c_pin_map]>
::  END I2C
::  BEGIN SPI
    ./include/spi_master
    ./include/spi_master/<[spi_pin_map]>
::  END SPI
::  BEGIN TIM
    ./include/tim
    ./include/tim/<[tim_pin_map]>
::  END TIM
::  BEGIN UART
    ./include/uart
    ./include/uart/<[uart_pin_map]>
::  END UART
}

expInclude: {
    include/<[mcu_header_path.lower()]>
    include/hal_ll_port
}

install: {
	src(include/hal_ll_pin_names.h) dst(include/hal_ll_port/hal_ll_pin_names.h)
	src(include/gpio/hal_ll_gpio.h) dst(include/hal_ll_port/hal_ll_gpio.h)
	src(include/gpio/hal_ll_gpio_constants.h) dst(include/hal_ll_port/hal_ll_gpio_constants.h)
	src(include/gpio/hal_ll_gpio_port.h) dst(include/hal_ll_port/hal_ll_gpio_port.h)
	src(include/spi_master/hal_ll_spi_master.h) dst(include/hal_ll_port/hal_ll_spi_master.h)
	src(include/tim/hal_ll_tim.h) dst(include/hal_ll_port/hal_ll_tim.h)
	src(include/hal_ll_target.h) dst(include/hal_ll_port/hal_ll_target.h)
	src(include/hal_ll_target_names.h) dst(include/hal_ll_port/hal_ll_target_names.h)
	src(include/hal_ll_target.h) dst(include/hal_ll_port/hal_ll_target.h)
}

alias: MikroSDK.HalLowLevel
