type: library
target: lib_hal_ll_adc

#begin python  # nxp specific
import re

hal_ll_def_list = []

hal_ll_def_list.append(MEMAKE_MCU_NAME)
hal_ll_def_list.append(MEMAKE_MCU_NAME[:4])

if(re.match("(^MKV4[246]F(.+)$)",MEMAKE_MCU_NAME)):
    hal_ll_def_list.append("__MKV4X_RCC__")
elif(re.match("(^MKV5[68]F(.+)$)",MEMAKE_MCU_NAME)):
    hal_ll_def_list.append("__MKV5X_RCC__")
elif(re.match("(^MK[2568](.+)$)",MEMAKE_MCU_NAME)):
    hal_ll_def_list.append("__MKX_RCC__")

mcu_header_path = MEMAKE_MCU_NAME

## BEGIN ADC
hal_ll_def_list.append("HAL_LL_ADC_RESOLUTION_MEMAKE=HAL_LL_ADC_RESOLUTION_12_BIT")

if(re.match("(^MKV5(.+)$)", MEMAKE_MCU_NAME)):
    hal_ll_def_list.append("MKV5xHSADC")
    adc_subimplementation = "implementation_2/hal_ll_adc.c"
else:
    adc_subimplementation = "implementation_1/hal_ll_adc.c"

adc_pin_map = "hal_ll_adc_pin_map"
## END ADC
#end python

defines: {
    <['\r\n'.join(hal_ll_def_list)]>
}

depends: {
    MikroC.Core
    MikroSDK.HalLowLevelCore
    MikroSDK.HalLowLevelCommon
}

sources: {
::  BEGIN ADC
    <[adc_subimplementation]>
::  END ADC
}

headers: {
    ../../include/hal_ll_rcc.h
    ../../include/hal_ll_target.h
::  BEGIN ADC
    ../../include/adc/hal_ll_adc.h
    ../../include/adc/<[adc_pin_map]>/hal_ll_adc_pin_map.h
::  END ADC
}

include: {
    ../../include
    ../../include/gpio
::  BEGIN ADC
    ../../include/adc
    ../../include/adc/<[adc_pin_map]>
}

expInclude: {
    ./include/<[mcu_header_path.lower()]>
    ./include/hal_ll_port
}

install: {
    src(../../include/adc/hal_ll_adc.h) dst(include/hal_ll_port/hal_ll_adc.h)
}

alias: MikroSDK.HalLowLevel.ADC
