type: library
target: lib_hal_ll_spi_master

#begin python  # pic specific
import re

hal_ll_def_list = []
if "PIC18" in MEMAKE_MCU_NAME:
    hal_ll_def_list.append("__pic18__")
else:
    hal_ll_def_list.append("__family_not_supported__")

hal_ll_def_list.append(MEMAKE_MCU_NAME)

## BEGIN SPI
hal_ll_def_list.append("MACRO_USAGE_SPI")

if (MEMAKE_MCU_NAME[-3:] == "K42" or MEMAKE_MCU_NAME[-3:] == "Q43"):
    spi_master_implementation = "implementation_2"
else:
    spi_master_implementation = "implementation_1"

## SPI baud rate implementations. ##
## Baud rate implementation 1 utilizes SPIxCON1 register and three possible prescalers (Fosc/4, Fosc/16 and Fosc/64).
if (re.match("(^PIC18L?F(([24]455)|([24]550))$)|(^PIC18L?F(([24]458)|([24]553))$)|(^PIC18L?F[24]((4|5|6))J11$)|(^PIC18L?F(24|25|26|44|45|46)J50$)|(^PIC18L?F(([24]515)|([24]610))$)|(^PIC18L?F(([24]525)|([24]620))$)|(^PIC18L?F(((2|4)585)|(2|4)680)$)|(^PIC18L?F[246](5|6)K80$)|(^PIC18L?L?F(([24]682)|([24]685))$)|(^PIC18F[24]6K20$)|(^PIC18((F[68](520|620|720))|(LF[68](520))|(LF[8](720)))$)|(^PIC18F(([68]525)|([68]621))$)|(^PIC18L?F(([68][56]27)|([68][67]22))$)|(^PIC18F(([68]585)|([68]680))$)|(^PIC18F((6(5|6)J15)|(8(5|6)J15)|((6|8)(5|6|7)J10))$)|(^PIC18L?F[68](3|4|5|6|7)J11$)|(^PIC18F[68](((6)J55)|((5|6|7)J50))$)|(^PIC18L?F(([68]628)|(([68])723))$)|(^PIC18L?F[68]6J16$)|(^PIC18F[689](6|7)J(60|65)$)|(^PIC18F[6,8]((5|6|7))J90$)|(^PIC18F[68]((6|7))J93$)|(^PIC18F8[67]J72$)", MEMAKE_MCU_NAME)):
    hal_ll_def_list.append("HAL_LL_SPI_MASTER_SPEED_IMPLEMENTATION_1")

## Baud rate implementation 2 utilizes SPIxCON1 register and four possible prescalers (Fosc/4, Fosc/8, Fosc/16 and Fosc/64).
elif (re.match("(^PIC18L?F[42][67]J[15][3]$)|(^PIC18F[68][567]K(22|90)$)", MEMAKE_MCU_NAME)):
    hal_ll_def_list.append("HAL_LL_SPI_MASTER_SPEED_IMPLEMENTATION_2")

## Baud rate implementation 3 utilizes SPIxCON1 register (clock selection) and 8-bits of prescaling resolution register (SSPxADD).
elif (re.match("(^PIC18L?F2(4K(22|40|50)|5K(22|40|50)|6K(22|40)|7K(40))$)|(^PIC18L?F4(5K(22|40|50)|6K(22|40)|7K(40))$)|(^PIC18L?F6(5K(40)|6K(40)|7K(40))$)|(^PIC18F[24][4567]Q10$)|(^PIC18F[689][567]J94$)|(^PIC18L?F[246][567]K40$)", MEMAKE_MCU_NAME)):
    hal_ll_def_list.append("HAL_LL_SPI_MASTER_SPEED_IMPLEMENTATION_3")

## Baud rate implementation 4 utilizes SPIxCLK register and 8-bits of prescaling resolution register (SPIxBAUD).
elif (re.match("(^PIC18L?F[245][567]K42$)|(^PIC18F57Q43$)", MEMAKE_MCU_NAME)):
    hal_ll_def_list.append("HAL_LL_SPI_MASTER_SPEED_IMPLEMENTATION_4")
else:
    hal_ll_def_list.append("__mcu_not_supported__")
## EOF SPI baud rate implementations. ##
## END SPI
#end python

defines: {
    <['\r\n'.join(hal_ll_def_list)]>
}

depends: {
    MikroC.Core
    MikroSDK.HalLowLevel.PPS
    MikroSDK.HalLowLevelCore
    MikroSDK.HalLowLevelCommon
}

sources: {
::  BEGIN PPS
    ./<[spi_master_implementation]>/hal_ll_spi_master.c
::  END PPS
}

headers: {
    ../../include/hal_ll_target.h
    ../../include/hal_ll_slrcon_map.h
    ../../include/hal_ll_odcon_map.h
::  BEGIN SPI
    ../../include/spi_master/hal_ll_spi_master.h
::  END SPI
}

include: {
    ../../include
    ../../include/gpio
::  BEGIN SPI
    ../../include/spi_master
::  END SPI
}

expInclude: {
    ./include/<[MEMAKE_MCU_NAME.lower()]>
    ./include/hal_ll_port
}

install: {
    src(../../include/spi_master/hal_ll_spi_master.h) dst(./include/hal_ll_port/hal_ll_spi_master.h)
    src(../../include/spi_master/hal_ll_spi_master_pin_map.h) dst(./include/hal_ll_port/hal_ll_spi_master_pin_map.h)
}

alias: MikroSDK.HalLowLevel.SPI.Master
