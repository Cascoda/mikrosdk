type: library
target: lib_board

#begin python
import re

BOARDS = {
    ## DEVELOPMENT BOARDS
    'BOARD_FUSION_FOR_ARM_V8': {
        'PATH': 'board_fusion_for_arm_v8',
        'MCU_CARD': True,
        'DIP_SOCKET': False,
        'MIKROBUS': True
    },
    'BOARD_FUSION_FOR_STM32_V8': {
        'PATH': 'board_fusion_for_stm32_v8',
        'MCU_CARD': True,
        'DIP_SOCKET': False,
        'MIKROBUS': True
    },
    'BOARD_EASYPIC_PRO_V8': {
        'PATH': 'board_easypic_pro_v8',
        'MCU_CARD': True,
        'DIP_SOCKET': False,
        'MIKROBUS': True
    },
    'BOARD_EASYPIC_V8': {
        'PATH': 'board_easypic_v8',
        'MCU_CARD': False,
        'DIP_SOCKET': True,
        'MIKROBUS': True
    },
    'BOARD_FUSION_FOR_PIC32_V8': {
        'PATH': 'board_fusion_for_pic32_v8',
        'MCU_CARD': True,
        'DIP_SOCKET': False,
        'MIKROBUS': True
    },
    'BOARD_FUSION_FOR_PIC_V8': {
        'PATH': 'board_fusion_for_pic_v8',
        'MCU_CARD': True,
        'DIP_SOCKET': False,
        'MIKROBUS': True
    },
    'BOARD_EASYMX_PRO_V7_FOR_STM32': {
        'PATH': 'board_easymx_pro_v7_for_stm32',
        'MCU_CARD': True,
        'DIP_SOCKET': False,
        'MIKROBUS': True
    },
    'BOARD_EASYPIC_PRO_V7': {
        'PATH': 'board_easypic_pro_v7',
        'MCU_CARD': True,
        'DIP_SOCKET': False,
        'MIKROBUS': True
    },
    'BOARD_EASYPIC_V7': {
        'PATH': 'board_easypic_v7',
        'MCU_CARD': False,
        'DIP_SOCKET': True,
        'MIKROBUS': True
    },
    'BOARD_EASYPIC_FUSION_V7': {
        'PATH': 'board_easypic_fusion_v7',
        'MCU_CARD': True,
        'DIP_SOCKET': False,
        'MIKROBUS': True
    },
    'BOARD_PICPLC16_V7': {
        'PATH': 'board_picplc16_v7',
        'MCU_CARD': False,
        'DIP_SOCKET': False,
        'MIKROBUS': True
    },
    ## CLICKER BOARDS
    'STM32_M4_CLICKER': {
        'PATH': 'clicker_stm32_m4',
        'MCU_CARD': False,
        'DIP_SOCKET': False,
        'MIKROBUS': True
    },
    'CLICKER_2_FOR_STM32': {
        'PATH': 'clicker_2_for_stm32',
        'MCU_CARD': False,
        'DIP_SOCKET': False,
        'MIKROBUS': True
    },
    'CLICKER_4_FOR_STM32': {
        'PATH': 'clicker_4_for_stm32',
        'MCU_CARD': False,
        'DIP_SOCKET': False,
        'MIKROBUS': True
    },
    'UNI_CLICKER': {
        'PATH': 'clicker_uni',
        'MCU_CARD': True,
        'DIP_SOCKET': False,
        'MIKROBUS': True
    },
    'PIC_CLICKER': {
        'PATH': 'clicker_pic',
        'MCU_CARD': False,
        'DIP_SOCKET': False,
        'MIKROBUS': True
    },
    'CLICKER_2_FOR_PIC18FK': {
        'PATH': 'clicker_2_for_pic18fk',
        'MCU_CARD': False,
        'DIP_SOCKET': False,
        'MIKROBUS': True
    },
    'CLICKER_2_FOR_PIC18FJ': {
        'PATH': 'clicker_2_for_pic18fj',
        'MCU_CARD': False,
        'DIP_SOCKET': False,
        'MIKROBUS': True
    },
    'PIC32MX_CLICKER': {
        'PATH': 'clicker_pic32mx',
        'MCU_CARD': False,
        'DIP_SOCKET': False,
        'MIKROBUS': True
    },
    'PIC32MZ_CLICKER': {
        'PATH': 'clicker_pic32mz',
        'MCU_CARD': False,
        'DIP_SOCKET': False,
        'MIKROBUS': True
    },
    '6LOWPAN_CLICKER': {
        'PATH': 'clicker_6lowpan',
        'MCU_CARD': False,
        'DIP_SOCKET': False,
        'MIKROBUS': True
    },
    'CLICKER_2_FOR_PIC32MX': {
        'PATH': 'clicker_2_for_pic32mx',
        'MCU_CARD': False,
        'DIP_SOCKET': False,
        'MIKROBUS': True
    },
    'CLICKER_2_FOR_PIC32MZ': {
        'PATH': 'clicker_2_for_pic32mz',
        'MCU_CARD': False,
        'DIP_SOCKET': False,
        'MIKROBUS': True
    },
    ## MIKROMEDIA BOARDS
    'MIKROMEDIA3FORSTM32F2CAPACITIVE': {
        'PATH': 'mikromedia_3_stm32f2_capacitive',
        'MCU_CARD': False,
        'DIP_SOCKET': False,
        'MIKROBUS': False
    },
    'MIKROMEDIA3FORSTM32F2CAPACITIVEFPI': {
        'PATH': 'mikromedia_3_stm32f2_capacitive_fpi',
        'MCU_CARD': False,
        'DIP_SOCKET': False,
        'MIKROBUS': True
    },
    'MIKROMEDIA3FORSTM32F4CAPACITIVE': {
        'PATH': 'mikromedia_3_stm32f4_capacitive',
        'MCU_CARD': False,
        'DIP_SOCKET': False,
        'MIKROBUS': False
    },
    'MIKROMEDIA3FORSTM32F4CAPACITIVEFPI': {
        'PATH': 'mikromedia_3_stm32f4_capacitive_fpi',
        'MCU_CARD': False,
        'DIP_SOCKET': False,
        'MIKROBUS': True
    },
    'MIKROMEDIA4FORSTM32F2CAPACITIVEFPI': {
        'PATH': 'mikromedia_4_stm32f2_capacitive_fpi',
        'MCU_CARD': False,
        'DIP_SOCKET': False,
        'MIKROBUS': True
    },
    'MIKROMEDIA4FORSTM32F4CAPACITIVE': {
        'PATH': 'mikromedia_4_stm32f4_capacitive',
        'MCU_CARD': False,
        'DIP_SOCKET': False,
        'MIKROBUS': False
    },
    'MIKROMEDIA4FORSTM32F4CAPACITIVEFPI': {
        'PATH': 'mikromedia_4_stm32f4_capacitive_fpi',
        'MCU_CARD': False,
        'DIP_SOCKET': False,
        'MIKROBUS': True
    },
    'MIKROMEDIA5FORSTM32F4CAPACITIVE': {
        'PATH': 'mikromedia_5_stm32f4_capacitive',
        'MCU_CARD': False,
        'DIP_SOCKET': False,
        'MIKROBUS': False
    },
    'MIKROMEDIA5FORSTM32F4CAPACITIVEFPI': {
        'PATH': 'mikromedia_5_stm32f4_capacitive_fpi',
        'MCU_CARD': False,
        'DIP_SOCKET': False,
        'MIKROBUS': True
    },
    'MIKROMEDIA5FORSTM32F7CAPACITIVE': {
        'PATH': 'mikromedia_5_stm32f7_capacitive',
        'MCU_CARD': False,
        'DIP_SOCKET': False,
        'MIKROBUS': False
    },
    'MIKROMEDIA5FORSTM32F7CAPACITIVEFPI': {
        'PATH': 'mikromedia_5_stm32f7_capacitive_fpi',
        'MCU_CARD': False,
        'DIP_SOCKET': False,
        'MIKROBUS': True
    },
    'MIKROMEDIA3FORPICCAPACITIVE': {
        'PATH': 'mikromedia_3_pic_capacitive',
        'MCU_CARD': False,
        'DIP_SOCKET': False,
        'MIKROBUS': False
    },
    'MIKROMEDIA3FORPIC32MZCAPACITIVE': {
        'PATH': 'mikromedia_3_pic32mz_capacitive',
        'MCU_CARD': False,
        'DIP_SOCKET': False,
        'MIKROBUS': False
    },
    'MIKROMEDIA4FORPIC32MZCAPACITIVE': {
        'PATH': 'mikromedia_4_pic32mz_capacitive',
        'MCU_CARD': False,
        'DIP_SOCKET': False,
        'MIKROBUS': False
    },
    'MIKROMEDIA5FORPIC32MZCAPACITIVE': {
        'PATH': 'mikromedia_5_pic32mz_capacitive',
        'MCU_CARD': False,
        'DIP_SOCKET': False,
        'MIKROBUS': False
    },
    'MIKROMEDIA7CAPACITIVE': {
        'PATH': 'mikromedia_7_capacitive',
        'MCU_CARD': True,
        'DIP_SOCKET': False,
        'MIKROBUS': True
    },
    ## FLIP AND CLICK BOARDS
    'FLIP_AND_CLICK_PIC32MZ': {
        'PATH': 'flip_and_click_pic32mz',
        'MCU_CARD': False,
        'DIP_SOCKET': False,
        'MIKROBUS': True
    },
    ## GENERIC BOARD
    'GENERIC_BOARD': {
        'PATH': 'board_generic',
        'MCU_CARD': False,
        'DIP_SOCKET': False,
        'MIKROBUS': False
    },
    ## NON MIKROE BOARDS
    'BOARD_CURIOSITY_HPC': {
        'PATH': 'board_curiosity_hpc',
        'MCU_CARD': False,
        'DIP_SOCKET': True,
        'MIKROBUS': True
    }
}

BOARD = BOARDS[BOARD_NAME]

if BOARD['MCU_CARD'] == True:
    MSDK_FILTERED_MCU_CARD = MCU_CARD_NAME.lower()
    if MCU_CARD_NAME == "":
        BOARD = BOARDS["GENERIC_BOARD"]
elif BOARD['DIP_SOCKET'] == True:
    MSDK_FILTERED_DIP_SOCKET_TYPE = MSDK_DIP_SOCKET_TYPE.lower()
    if MSDK_DIP_SOCKET_TYPE == "":
        BOARD = BOARDS["GENERIC_BOARD"]

if BOARD['MCU_CARD'] == True:
    MCU_CARD_PATH = MSDK_FILTERED_MCU_CARD
else:
    MCU_CARD_PATH = "MCU_CARD_WRONG_PATH"

dip_socket_check = re.match("(^dip((18$)|(20$)|(28$)|(40$)))",MSDK_FILTERED_DIP_SOCKET_TYPE)

if (BOARD['DIP_SOCKET'] == True) and dip_socket_check:
    BOARD_DIP_SOCKET_PATH = MSDK_FILTERED_DIP_SOCKET_TYPE
elif (BOARD['DIP_SOCKET'] == True) and MSDK_FILTERED_DIP_SOCKET_TYPE[0:3] == "dip":
    BOARD_DIP_SOCKET_PATH = "WRONG_DIP_SELECTED"
elif (BOARD['DIP_SOCKET'] == True) and MSDK_FILTERED_DIP_SOCKET_TYPE[0:3] != "dip":
    BOARD_DIP_SOCKET_PATH = "NO_DIP_SELECTED"
#end python

headers: {
    ./include/boards/<[BOARD['PATH']]>/board.h
#if BOARD['MCU_CARD'] == True
    ./include/mcu_cards/<[MCU_CARD_PATH]>/mcu_card.h
#endif
#if BOARD['DIP_SOCKET'] == True
    ./include/boards/<[BOARD['PATH']]>/dip_sockets/<[BOARD_DIP_SOCKET_PATH]>/dip_socket.h
#endif
}

include: {
    ./include/boards/<[BOARD['PATH']]>
#if BOARD['MCU_CARD'] == True
    ./include/mcu_cards/<[MCU_CARD_PATH]>
#endif
#if BOARD['DIP_SOCKET'] == True
    ./include/boards/<[BOARD['PATH']]>/dip_sockets/<[BOARD_DIP_SOCKET_PATH]>
#endif
}

depends: {
    MikroC.Core
    MikroSDK.HalInterface

#if BOARD['MIKROBUS'] == True
    MikroSDK.MikroBus
#endif
}

expinclude: {
    ./include
    ./include/board
}

install: {
    src(./include/boards/<[BOARD['PATH']]>/board.h) dst(./include/board/board.h)
#if BOARD['MCU_CARD'] == True
    src(./include/mcu_cards/<[MCU_CARD_PATH]>/mcu_card.h) dst(./include/board/mcu_card.h)
#endif
#if BOARD['DIP_SOCKET'] == True
    src(./include/boards/<[BOARD['PATH']]>/dip_sockets/<[BOARD_DIP_SOCKET_PATH]>/dip_socket.h) dst(./include/board/dip_socket.h)
#endif
}

alias: MikroSDK.Board
