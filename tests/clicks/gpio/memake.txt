type: subdirs
project: tests_click_boards_gpio

#begin python
import re

click_pic18_regex = "|(^PIC18F2455$|^PIC18F2458$|^PIC18F24J11$|^PIC18F24J50$|^PIC18F24K50$|^PIC18F2515$|^PIC18F2525$|^PIC18F2550$|^PIC18F2553$|^PIC18F2585$|^PIC18F25J11$|^PIC18F25J50$|^PIC18F25K40$|^PIC18F25K42$|^PIC18F25K50$|^PIC18F25K80$|^PIC18F2680$|^PIC18F2682$|^PIC18F2685$|^PIC18F26J11$|^PIC18F26J13$|^PIC18F26J50$|^PIC18F26J53$|^PIC18F26K40$|^PIC18F26K42$|^PIC18F4455$|^PIC18F4458$|^PIC18F44J11$|^PIC18F44J50$|^PIC18F4515$|^PIC18F4525$|^PIC18F4550$|^PIC18F4553$|^PIC18F4585$|^PIC18F45J11$|^PIC18F45J50$|^PIC18F45K22$|^PIC18F45K40$|^PIC18F45K42$|^PIC18F45K50$|^PIC18F45K80$|^PIC18F4680$|^PIC18F4682$|^PIC18F4685$|^PIC18F46J11$|^PIC18F46J13$|^PIC18F46J50$|^PIC18F46J53$|^PIC18F46K40$|^PIC18F46K42$|^PIC18F47Q10$|^PIC18F55K42$|^PIC18F56K42$|^PIC18F6520$|^PIC18F6525$|^PIC18F6527$|^PIC18F6585$|^PIC18F65J10$|^PIC18F65J11$|^PIC18F65J15$|^PIC18F65J50$|^PIC18F65J90$|^PIC18F65J94$|^PIC18F65K22$|^PIC18F65K40$|^PIC18F65K80$|^PIC18F65K90$|^PIC18F6680$|^PIC18F66J10$|^PIC18F66J94$|^PIC18F66K40$|^PIC18F67K40$|^PIC18F8520$|^PIC18F8525$|^PIC18F8527$|^PIC18F8585$|^PIC18F85J10$|^PIC18F85J11$|^PIC18F85J15$|^PIC18F85J50$|^PIC18F85J90$|^PIC18F85J94$|^PIC18F85K22$|^PIC18F85K90$|^PIC18F8680$|^PIC18F86J10$|^PIC18F86J94$|^PIC18F95J94$|^PIC18F96J94$|^PIC18LF2455$|^PIC18LF2458$|^PIC18LF24J11$|^PIC18LF24J50$|^PIC18LF24K50$|^PIC18LF2515$|^PIC18LF2525$|^PIC18LF2550$|^PIC18LF2553$|^PIC18LF2585$|^PIC18LF25J11$|^PIC18LF25J50$|^PIC18LF25K40$|^PIC18LF25K42$|^PIC18LF25K50$|^PIC18LF25K80$|^PIC18LF2680$|^PIC18LF2682$|^PIC18LF2685$|^PIC18LF26J11$|^PIC18LF26J13$|^PIC18LF26J50$|^PIC18LF26J53$|^PIC18LF26K40$|^PIC18LF26K42$|^PIC18LF4455$|^PIC18LF4458$|^PIC18LF44J11$|^PIC18LF44J50$|^PIC18LF4515$|^PIC18LF4525$|^PIC18LF4550$|^PIC18LF4553$|^PIC18LF4585$|^PIC18LF45J11$|^PIC18LF45J50$|^PIC18LF45K22$|^PIC18LF45K40$|^PIC18LF45K42$|^PIC18LF45K50$|^PIC18LF45K80$|^PIC18LF4680$|^PIC18LF4682$|^PIC18LF4685$|^PIC18LF46J11$|^PIC18LF46J13$|^PIC18LF46J50$|^PIC18LF46J53$|^PIC18LF46K40$|^PIC18LF46K42$|^PIC18LF55K42$|^PIC18LF56K42$|^PIC18LF6520$|^PIC18LF6527$|^PIC18LF65K40$|^PIC18LF65K80$|^PIC18LF66K40$|^PIC18LF67K40$|^PIC18LF8520$|^PIC18LF8527$|^PIC18LF8720$)"

## cap touch click memory regex definitions by chip core
click_cap_touch_regex_stm32_m0 = "(^STM32(([FGL]0(.+)[346])|(L072VZ)|(L073[RC][BZ])|(L073V[8BZ])|(L081[CK]Z))$)"
click_cap_touch_regex_stm32_m3 = "|(^STM32F10[0-3](.+)$)"
click_cap_touch_regex_stm32_m4 = "|(^STM32F(.+)[46]$)"
click_cap_touch_regex_stm32_m7 = "|(^ALL$)" ## All chips have enough memory

click_cap_touch_regex = click_cap_touch_regex_stm32_m0 + click_cap_touch_regex_stm32_m3 + click_cap_touch_regex_stm32_m4 + click_cap_touch_regex_stm32_m7 + click_pic18_regex
## EOF cap touch click memory regex definitions by chip core

## opto encoder 3 click memory regex definitions by chip core
click_opto_encoder_3_regex_stm32_m0 = "(^STM32(([FGL]0(.+)[346])|(L072VZ)|(L073[RC][BZ])|(L073V[8BZ])|(L081[CK]Z))$)"
click_opto_encoder_3_regex_stm32_m3 = "|(^STM32F10[0-3](.+)$)"
click_opto_encoder_3_regex_stm32_m4 = "|(^STM32F(.+)[46]$)"
click_opto_encoder_3_regex_stm32_m7 = "|(^ALL$)" ## All chips have enough memory

click_opto_encoder_3_regex = click_opto_encoder_3_regex_stm32_m0 + click_opto_encoder_3_regex_stm32_m3 + click_opto_encoder_3_regex_stm32_m4 + click_opto_encoder_3_regex_stm32_m7 + click_pic18_regex
## EOF opto encoder 3 click memory regex definitions by chip core

## pll click memory regex definitions by chip core
click_pll_regex_stm32_m0 = "(^STM32(([FGL]0(.+)[346])|(L072VZ)|(L073[RC][BZ])|(L073V[8BZ])|(L081[CK]Z))$)"
click_pll_regex_stm32_m3 = "|(^STM32F10[0-3](.+)$)"
click_pll_regex_stm32_m4 = "|(^STM32F(.+)[46]$)"
click_pll_regex_stm32_m7 = "|(^ALL$)" ## All chips have enough memory

click_pll_regex = click_pll_regex_stm32_m0 + click_pll_regex_stm32_m3 + click_pll_regex_stm32_m4 + click_pll_regex_stm32_m7 + click_pic18_regex
## EOF pll click memory regex definitions by chip core

## sht1x click memory regex definitions by chip core
click_sht1x_regex_stm32_m0 = "(^STM32(([FGL]0(.+)[346])|(L072VZ)|(L073[RC][BZ])|(L073V[8BZ])|(L081[CK]Z))$)"
click_sht1x_regex_stm32_m3 = "|(^STM32F10[0-3](.+)$)"
click_sht1x_regex_stm32_m4 = "|(^STM32F(.+)[46]$)"
click_sht1x_regex_stm32_m7 = "|(^ALL$)" ## All chips have enough memory

click_sht1x_regex = click_sht1x_regex_stm32_m0 + click_sht1x_regex_stm32_m3 + click_sht1x_regex_stm32_m4 + click_sht1x_regex_stm32_m7 + click_pic18_regex
## EOF sht1x click memory regex definitions by chip core

## vibra sense click memory regex definitions by chip core
click_vibra_sense_regex_stm32_m0 = "(^STM32(([FGL]0(.+)[346])|(L072VZ)|(L073[RC][BZ])|(L073V[8BZ])|(L081[CK]Z))$)"
click_vibra_sense_regex_stm32_m3 = "|(^STM32F10[0-3](.+)$)"
click_vibra_sense_regex_stm32_m4 = "|(^STM32F(.+)[46]$)"
click_vibra_sense_regex_stm32_m7 = "|(^ALL$)" ## All chips have enough memory

click_vibra_sense_regex = click_vibra_sense_regex_stm32_m0 + click_vibra_sense_regex_stm32_m3 + click_vibra_sense_regex_stm32_m4 + click_vibra_sense_regex_stm32_m7 + click_pic18_regex
## EOF vibra sense memory regex definitions by chip core

## 4x4 rgb click memory regex definitions by chip core
click_4x4_rgb_regex_stm32_m0 = "(^STM32(([FGL]0(.+)[346])|(L072VZ)|(L073[RC][BZ])|(L073V[8BZ])|(L081[CK]Z))$)"
click_4x4_rgb_regex_stm32_m3 = "|(^ALL$)" ## All chips have enough memory
click_4x4_rgb_regex_stm32_m4 = "|(^STM32F(.+)[46]$)"
click_4x4_rgb_regex_stm32_m7 = "|(^ALL$)" ## All chips have enough memory

click_4x4_rgb_regex = click_4x4_rgb_regex_stm32_m0 + click_4x4_rgb_regex_stm32_m3 + click_4x4_rgb_regex_stm32_m4 + click_4x4_rgb_regex_stm32_m7 + click_pic18_regex
## EOF 4x4 rgb memory regex definitions by chip core

if re.match(click_cap_touch_regex,MEMAKE_MCU_NAME):
    memory_issue_click_cap_touch = True
else:
    memory_issue_click_cap_touch = False

if re.match(click_opto_encoder_3_regex,MEMAKE_MCU_NAME):
    memory_issue_click_opto_encoder_3 = True
else:
    memory_issue_click_opto_encoder_3 = False

if re.match(click_pll_regex,MEMAKE_MCU_NAME):
    memory_issue_click_pll = True
else:
    memory_issue_click_pll = False

if re.match(click_sht1x_regex,MEMAKE_MCU_NAME):
    memory_issue_click_sht1x = True
else:
    memory_issue_click_sht1x = False

if re.match(click_vibra_sense_regex,MEMAKE_MCU_NAME):
    memory_issue_click_vibra_sense = True
else:
    memory_issue_click_vibra_sense = False

if re.match(click_4x4_rgb_regex,MEMAKE_MCU_NAME):
    memory_issue_click_4x4_rgb = True
else:
    memory_issue_click_4x4_rgb = False

## CUSTOM EXAMPLES
if re.match("TODO","TODO"):
    memory_issue = True
else:
    memory_issue = False
## EOF CUSTOM EXAMPLES
#end python

subdirs: {
#if memory_issue_click_cap_touch == False
    ./click_cap_touch
#else
    ./click_cap_touch/not_enough_memory
#endif
#if memory_issue_click_opto_encoder_3 == False
    ./click_opto_encoder_3
#else
    ./click_opto_encoder_3/not_enough_memory
#endif
#if memory_issue_click_pll == False
    ./click_pll
#else
    ./click_pll/not_enough_memory
#endif
#if memory_issue_click_sht1x == False
    ./click_sht1x
#else
    ./click_sht1x/not_enough_memory
#endif
#if memory_issue_click_vibra_sense == False
    ./click_vibra_sense
#else
    ./click_vibra_sense/not_enough_memory
#endif
::  Testing delays for timing specific clicks
#if memory_issue_click_4x4_rgb == False
    ./click_4x4_rgb
#else
    ./click_4x4_rgb/not_enough_memory
#endif
#if memory_issue == False
::  TODO if any issues with custom examples
#endif
}
